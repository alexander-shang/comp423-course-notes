{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Alex's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Alexander Shang</li> <li>Reviewer: Dhyey Shah</li> </ul>"},{"location":"tutorials/rust-setup/#part-1-prerequisites","title":"Part 1: Prerequisites","text":"<ol> <li>A GitHub Account</li> <li>Git installed</li> <li>Visual Studio Code (VS Code)</li> <li>Docker installed</li> <li>Command-line basics</li> </ol>"},{"location":"tutorials/rust-setup/#part-2-creating-the-dev-container","title":"Part 2: Creating the Dev Container","text":"<p>First, you'll want to start with a new blank directory. In your terminal you'll run three commands:</p> <pre><code>mkdir &lt;directory-name&gt;\ncd &lt;directory-name&gt;\ngit init\n</code></pre> <p>Then create a README.me file: <pre><code>echo \"# Rust Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README.md\" \n</code></pre></p>"},{"location":"tutorials/rust-setup/#part-3-create-a-remote-repository-on-github","title":"Part 3: Create a Remote Repository on GitHub","text":"<p>Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>Fill in the details as follows:</p> <ul> <li>Repository Name:  <li>Description: \"Rust Tutorial\" (this is optional)</li> <li>Visibility: Public</li> <p>Do not initialize the repository with a README, .gitignore, or license.</p> <p>Click Create Repository.</p> <p>To link your local repository to GitHub you can run the following: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/&lt;directory-name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></p>"},{"location":"tutorials/rust-setup/#part-4-setting-up-the-development-environment","title":"Part 4: Setting up the Development Environment","text":"<p>Next, you'll want to open up VSCode and open the directory you just created. You can do this via: File &gt; Open Folder. Make sure you have the Dev Containers extension downloaded (you can find extensions on the left toolbar). Then\uff0ccreate a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory: <code>.devcontainer/devcontainer.json</code></p> <p>In this file, you'll want to include the following code: <pre><code>{\n  \"name\": \"COMP423 Rust Tutorial\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n        \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre></p> <p>Note</p> <p><code>name</code>: A descriptive name for your dev container.</p> <p><code>image</code>: The Docker image to use, in this case, the latest version of a Rust environment. Microsoft maintains a collection of base images for many programming language environments, but you can also create your own!</p> <p><code>customizations</code>: Adds useful configurations to VS Code, like installing the Rust extension.</p> <p>After this, you should reopen the project in the container. You can do this by pressing Ctrl+Shift+P on Windows or Cmd+Shift+P on Mac and entering \"Dev Containers: Reopen in Container.\"</p> <p>You can confirm the rust version in the container by runnning the command: <code>rustc --version</code>. If the output is something other than a version number, double check that the above instructions are followed correctly.</p>"},{"location":"tutorials/rust-setup/#part-5-creating-your-rust-project","title":"Part 5: Creating your Rust Project","text":"<ol> <li>Inside the Rust project, we're going to use Rust's package manager, Cargo: <pre><code>cargo new --vcs none hello_comp423\ncd hello_comp423\n</code></pre></li> </ol> <p>Note</p> <p><code>--vcs-none</code> ensures that a new git repository is not automatically created on your behalf</p> <ol> <li>Open the 'main.rs' file inside of the src directory and replace the contents with: <pre><code>fn main(){\n    println(\"Hello COMP423!\");\n}\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#part-6-compiling-and-running-your-project","title":"Part 6: Compiling and Running your Project","text":"<p>Build your project by running the command: <pre><code>cargo build\n</code></pre></p> <p>Note</p> <p>This is similar to the <code>gcc</code> command in C/C++, but it does more than just compile your program. The <code>cargo build</code> command also automates the management of dependencies, configuration, and build settings.  </p> <p>To run the program, run the following: <pre><code>cargo run\n</code></pre> Your output should be: <pre><code>Hello COMP423!\n</code></pre> If the following output doesn't match, make sure that you followed all the instructions.</p> <p>Note</p> <p><code>cargo run</code> combines all the steps that are executed with the 'build' command, but also executes the program!</p>"}]}